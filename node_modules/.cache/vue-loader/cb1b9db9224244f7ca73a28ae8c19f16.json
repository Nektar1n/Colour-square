{"remainingRequest":"/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/src/App.vue","mtime":1639484594011},{"path":"/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogImFwcCIgfSB9LCBbCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIndyYXBwZXIiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogIml0ZW1zTGlzdHMiIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJhbGxUaXRsZSIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNob3dCdG4iLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJzaG93MSIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zaG93SXRlbTEoKQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIuKdryIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpdGxlcyIgfSksCiAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNDaGVrZWRMaXN0MSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImhhc0NoZWtlZExpc3QxIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImN1c3RvbUNoZWNrYm94IiwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiY2hlY2tib3giIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsKICAgICAgICAgICAgICAgIGNoZWNrZWQ6IEFycmF5LmlzQXJyYXkoX3ZtLmhhc0NoZWtlZExpc3QxKQogICAgICAgICAgICAgICAgICA/IF92bS5faShfdm0uaGFzQ2hla2VkTGlzdDEsIG51bGwpID4gLTEKICAgICAgICAgICAgICAgICAgOiBfdm0uaGFzQ2hla2VkTGlzdDEsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIHZhciAkJGEgPSBfdm0uaGFzQ2hla2VkTGlzdDEsCiAgICAgICAgICAgICAgICAgICAgJCRlbCA9ICRldmVudC50YXJnZXQsCiAgICAgICAgICAgICAgICAgICAgJCRjID0gJCRlbC5jaGVja2VkID8gdHJ1ZSA6IGZhbHNlCiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KCQkYSkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJCR2ID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICQkaSA9IF92bS5faSgkJGEsICQkdikKICAgICAgICAgICAgICAgICAgICBpZiAoJCRlbC5jaGVja2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAkJGkgPCAwICYmIChfdm0uaGFzQ2hla2VkTGlzdDEgPSAkJGEuY29uY2F0KFskJHZdKSkKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgJCRpID4gLTEgJiYKICAgICAgICAgICAgICAgICAgICAgICAgKF92bS5oYXNDaGVrZWRMaXN0MSA9ICQkYQogICAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZSgwLCAkJGkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdCgkJGEuc2xpY2UoJCRpICsgMSkpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBfdm0uaGFzQ2hla2VkTGlzdDEgPSAkJGMKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCJMaXN0IDEiKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaXN0VGl0bGUiIH0sIFtfdm0uX3YoIkxpc3QgMSIpXSksCiAgICAgICAgICBfYygiaXRlbXMiLCB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzU2hvd0l0ZW0xLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImhhc1Nob3dJdGVtMSIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgYXR0cnM6IHsgaGFzQ2hla2VkTGlzdDE6IF92bS5oYXNDaGVrZWRMaXN0MSB9LAogICAgICAgICAgfSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImFsbFRpdGxlIiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2hvd0J0biIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogInNob3cyIiB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnNob3dJdGVtMigpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigi4p2vIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGVzIiB9KSwKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc0NoZWtlZExpc3QyLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiaGFzQ2hla2VkTGlzdDIiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY3VzdG9tQ2hlY2tib3giLAogICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJjaGVja2JveCIgfSwKICAgICAgICAgICAgICBkb21Qcm9wczogewogICAgICAgICAgICAgICAgY2hlY2tlZDogQXJyYXkuaXNBcnJheShfdm0uaGFzQ2hla2VkTGlzdDIpCiAgICAgICAgICAgICAgICAgID8gX3ZtLl9pKF92bS5oYXNDaGVrZWRMaXN0MiwgbnVsbCkgPiAtMQogICAgICAgICAgICAgICAgICA6IF92bS5oYXNDaGVrZWRMaXN0MiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgdmFyICQkYSA9IF92bS5oYXNDaGVrZWRMaXN0MiwKICAgICAgICAgICAgICAgICAgICAkJGVsID0gJGV2ZW50LnRhcmdldCwKICAgICAgICAgICAgICAgICAgICAkJGMgPSAkJGVsLmNoZWNrZWQgPyB0cnVlIDogZmFsc2UKICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoJCRhKSkgewogICAgICAgICAgICAgICAgICAgIHZhciAkJHYgPSBudWxsLAogICAgICAgICAgICAgICAgICAgICAgJCRpID0gX3ZtLl9pKCQkYSwgJCR2KQogICAgICAgICAgICAgICAgICAgIGlmICgkJGVsLmNoZWNrZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICQkaSA8IDAgJiYgKF92bS5oYXNDaGVrZWRMaXN0MiA9ICQkYS5jb25jYXQoWyQkdl0pKQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAkJGkgPiAtMSAmJgogICAgICAgICAgICAgICAgICAgICAgICAoX3ZtLmhhc0NoZWtlZExpc3QyID0gJCRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDAsICQkaSkKICAgICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KCQkYS5zbGljZSgkJGkgKyAxKSkpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIF92bS5oYXNDaGVrZWRMaXN0MiA9ICQkYwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIkxpc3QgMiIpLAogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxpc3RUaXRsZSIgfSwgW192bS5fdigiTGlzdCAyIildKSwKICAgICAgICAgIF9jKCJpdGVtcyIsIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNTaG93SXRlbTIsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiaGFzU2hvd0l0ZW0yIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICBdLAogICAgICAgICAgICBhdHRyczogeyBoYXNDaGVrZWRMaXN0MjogX3ZtLmhhc0NoZWtlZExpc3QyIH0sCiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYWxsVGl0bGUiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzaG93QnRuIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAic2hvdzMiIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2hvd0l0ZW0zKCkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCLina8iKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZXMiIH0pLAogICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzQ2hla2VkTGlzdDMsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJoYXNDaGVrZWRMaXN0MyIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjdXN0b21DaGVja2JveCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImNoZWNrYm94IiB9LAogICAgICAgICAgICAgIGRvbVByb3BzOiB7CiAgICAgICAgICAgICAgICBjaGVja2VkOiBBcnJheS5pc0FycmF5KF92bS5oYXNDaGVrZWRMaXN0MykKICAgICAgICAgICAgICAgICAgPyBfdm0uX2koX3ZtLmhhc0NoZWtlZExpc3QzLCBudWxsKSA+IC0xCiAgICAgICAgICAgICAgICAgIDogX3ZtLmhhc0NoZWtlZExpc3QzLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCRldmVudCkgewogICAgICAgICAgICAgICAgICB2YXIgJCRhID0gX3ZtLmhhc0NoZWtlZExpc3QzLAogICAgICAgICAgICAgICAgICAgICQkZWwgPSAkZXZlbnQudGFyZ2V0LAogICAgICAgICAgICAgICAgICAgICQkYyA9ICQkZWwuY2hlY2tlZCA/IHRydWUgOiBmYWxzZQogICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSgkJGEpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyICQkdiA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAkJGkgPSBfdm0uX2koJCRhLCAkJHYpCiAgICAgICAgICAgICAgICAgICAgaWYgKCQkZWwuY2hlY2tlZCkgewogICAgICAgICAgICAgICAgICAgICAgJCRpIDwgMCAmJiAoX3ZtLmhhc0NoZWtlZExpc3QzID0gJCRhLmNvbmNhdChbJCR2XSkpCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICQkaSA+IC0xICYmCiAgICAgICAgICAgICAgICAgICAgICAgIChfdm0uaGFzQ2hla2VkTGlzdDMgPSAkJGEKICAgICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgJCRpKQogICAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoJCRhLnNsaWNlKCQkaSArIDEpKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLmhhc0NoZWtlZExpc3QzID0gJCRjCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiTGlzdCAzIiksCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGlzdFRpdGxlIiB9LCBbX3ZtLl92KCJMaXN0IDMiKV0pLAogICAgICAgICAgX2MoIml0ZW1zIiwgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc1Nob3dJdGVtMywKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJoYXNTaG93SXRlbTMiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIGF0dHJzOiB7IGhhc0NoZWtlZExpc3QzOiBfdm0uaGFzQ2hla2VkTGlzdDMgfSwKICAgICAgICAgIH0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJhbGxUaXRsZSIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNob3dCdG4iLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJzaG93NCIgfSwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zaG93SXRlbTQoKQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIuKdryIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpdGxlcyIgfSksCiAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNDaGVrZWRMaXN0NCwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImhhc0NoZWtlZExpc3Q0IiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImN1c3RvbUNoZWNrYm94IiwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiY2hlY2tib3giIH0sCiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsKICAgICAgICAgICAgICAgIGNoZWNrZWQ6IEFycmF5LmlzQXJyYXkoX3ZtLmhhc0NoZWtlZExpc3Q0KQogICAgICAgICAgICAgICAgICA/IF92bS5faShfdm0uaGFzQ2hla2VkTGlzdDQsIG51bGwpID4gLTEKICAgICAgICAgICAgICAgICAgOiBfdm0uaGFzQ2hla2VkTGlzdDQsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIHZhciAkJGEgPSBfdm0uaGFzQ2hla2VkTGlzdDQsCiAgICAgICAgICAgICAgICAgICAgJCRlbCA9ICRldmVudC50YXJnZXQsCiAgICAgICAgICAgICAgICAgICAgJCRjID0gJCRlbC5jaGVja2VkID8gdHJ1ZSA6IGZhbHNlCiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KCQkYSkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJCR2ID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICQkaSA9IF92bS5faSgkJGEsICQkdikKICAgICAgICAgICAgICAgICAgICBpZiAoJCRlbC5jaGVja2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAkJGkgPCAwICYmIChfdm0uaGFzQ2hla2VkTGlzdDQgPSAkJGEuY29uY2F0KFskJHZdKSkKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgJCRpID4gLTEgJiYKICAgICAgICAgICAgICAgICAgICAgICAgKF92bS5oYXNDaGVrZWRMaXN0NCA9ICQkYQogICAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZSgwLCAkJGkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdCgkJGEuc2xpY2UoJCRpICsgMSkpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBfdm0uaGFzQ2hla2VkTGlzdDQgPSAkJGMKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCJMaXN0IDQiKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaXN0VGl0bGUiIH0sIFtfdm0uX3YoIkxpc3QgNCIpXSksCiAgICAgICAgICBfYygiaXRlbXMiLCB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzU2hvd0l0ZW00LAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImhhc1Nob3dJdGVtNCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgYXR0cnM6IHsgaGFzQ2hla2VkTGlzdDQ6IF92bS5oYXNDaGVrZWRMaXN0NCB9LAogICAgICAgICAgfSksCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICBdKSwKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}