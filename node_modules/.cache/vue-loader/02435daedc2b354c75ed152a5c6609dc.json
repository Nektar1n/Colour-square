{"remainingRequest":"/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/src/components/items.vue?vue&type=template&id=0e805840&scoped=true&","dependencies":[{"path":"/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/src/components/items.vue","mtime":1639484594005},{"path":"/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nikitavysokij/Desktop/MYPROJECTS/listcolour/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}